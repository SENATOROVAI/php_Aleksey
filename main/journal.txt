03.04.2023 - написали логику калькулятора, сделали его рабочим:
1. Получили из $_POST значения по именам данных с фронта.
2. Прописали цикл на правильное вычисление результатов.
3. Добавили в цикл проверку существования данных и защиту от деления на ноль
4. Проверкой по isset() (9 строка на бэке) избавились от предупреждений при запуске калькулятора
5. Изменил проверку значений и is_empty() на '== NULL'. Начало отрабатывать предупреждение о делении на ноль.
   is_null() при этом выдаёт какую-то ошибку.
6. Переписал на фронте тип данных членов выражения с number на float. Появилась возможность использовать дробные числа.




04.04.2023 -  сделали ещё 2 калькулятора, на простом switch и на switch с использованием функций:
1. Я узнал, что типа float в HTML не существует. И, соответственно, PHP - язык с динамической типизацией (можно писать что и как угодно и многое будет прощено)
2. Сделали калькулятор на простом switch
3. Сделали калькулятор на switch с использованием функций
4. Ссылка на функции идёт с аргументами
5. switch - это замена условной конструкции, понимаю возможные случае их использования




05.04.2023 - изучили работу циклов while(), for(), foreach()
1. Цикл while() на обычном синтаксисе. Начальное значение задаётся отдельно. Инкремент в теле цикла.
   Пример: 
	$i = 2; 
	while($i < 4) 
	{...; $i++;}
2. Цикл while() на альтернативном синтаксисе. Тело открывается с помощью :  Закрывается endwhile;
3. Цикл for() на обычном синтаксисе. Начальное значение задаётся в описании. Инкремент в описании.
   Пример: 
	for($i = 2; $i < 4; $i++) 
	{...;}
4. Цикл for() на альтернативном синтаксисе.  Тело открывается с помощью :  Закрывается endfor;
5. Прикол циклов на альтернативном синтаксисе в вёрстке в том, что открытие и закрытие 
   прописывваются в отдельных <?php ... ?> инструкциях на разных строках. 
   А между ними можно поместить неограниченно кода, который будет повторяться.
6. Цикл foreach(). Работает с массивом. По умолчанию сам перебирает все элементы.
   Пример: 
	$num = [2, 3]; 
	foreach($num as $key => $value) 
	{...;}
7. Изучили три варианта вывода строк с помощью оператора echo. 
	7.1. Строка в "", элементы в ''.
	     Прикол в том, что без лишних движений можно дать ссылку на переменную с помощью {}
	     Пример: 
	     echo "<input type='text' name='num{$i}' id=''><br><br>";
	7.2. Строка в "", элементы в "", экранирование с помощью \.
	     Прикол тот же самый, что и 7.1, но тяжелее читать.
	     Пример: 
	     echo "<input type=\"text\" name=\"num{$i}\" id=\"\"><br><br>";
	7.3. Строка в '', элементы также в "".
	     Прикол в том, что строку можно просто скопировать и не париться с заменой кавычек. 
	     Минус в том, что переменную нужно упоминать с помощью конкатенации, можно забыть и запутуться.
	     Пример: 
	     echo '<input type="text" name="num' . $i . '" id=""><br><br>';
   Предпочтительным является вариант 7.1.