03.04.2023 - написали логику калькулятора, сделали его рабочим:
1. Получили из $_POST значения по именам данных с фронта.
2. Прописали цикл на правильное вычисление результатов.
3. Добавили в цикл проверку существования данных и защиту от деления на ноль
4. Проверкой по isset() (9 строка на бэке) избавились от предупреждений при запуске калькулятора
5. Изменил проверку значений и is_empty() на '== NULL'. Начало отрабатывать предупреждение о делении на ноль.
   is_null() при этом выдаёт какую-то ошибку.
6. Переписал на фронте тип данных членов выражения с number на float. Появилась возможность использовать 
   дробные числа.




04.04.2023 -  сделали ещё 2 калькулятора, на простом switch и на switch с использованием функций:
1. Я узнал, что типа float в HTML не существует. И, соответственно, PHP - язык с динамической типизацией 
   (можно писать что и как угодно и многое будет прощено)
2. Сделали калькулятор на простом switch
3. Сделали калькулятор на switch с использованием функций
4. Ссылка на функции идёт с аргументами
5. switch - это замена условной конструкции, понимаю возможные случае их использования




05.04.2023 - изучили работу циклов while(), for(), foreach()
1. Цикл while() на обычном синтаксисе. Начальное значение задаётся отдельно. Инкремент в теле цикла.
   Пример: 
	$i = 2; 
	while($i < 4) 
	{...; $i++;}
2. Цикл while() на альтернативном синтаксисе. Тело открывается с помощью :  Закрывается endwhile;
3. Цикл for() на обычном синтаксисе. Начальное значение задаётся в описании. Инкремент в описании.
   Пример: 
	for($i = 2; $i < 4; $i++) 
	{...;}
4. Цикл for() на альтернативном синтаксисе.  Тело открывается с помощью :  Закрывается endfor;
5. Прикол циклов на альтернативном синтаксисе в вёрстке в том, что открытие и закрытие 
   прописывваются в отдельных <?php ... ?> инструкциях на разных строках. 
   А между ними можно поместить неограниченно кода, который будет повторяться.
6. Цикл foreach(). Работает с массивом. По умолчанию сам перебирает все элементы.
   Пример: 
	$num = [2, 3]; 
	foreach($num as $key => $value) 
	{...;}
7. Изучили три варианта вывода строк с помощью оператора echo. 
	7.1. Строка в "", элементы в ''.
	     Прикол в том, что без лишних движений можно дать ссылку на переменную с помощью {}
	     Пример: 
	     echo "<input type='text' name='num{$i}' id=''><br><br>";
	7.2. Строка в "", элементы в "", экранирование с помощью \.
	     Прикол тот же самый, что и 7.1, но тяжелее читать.
	     Пример: 
	     echo "<input type=\"text\" name=\"num{$i}\" id=\"\"><br><br>";
	7.3. Строка в '', элементы также в "".
	     Прикол в том, что строку можно просто скопировать и не париться с заменой кавычек. 
	     Минус в том, что переменную нужно упоминать с помощью конкатенации, можно забыть и запутуться.
	     Пример: 
	     echo '<input type="text" name="num' . $i . '" id=""><br><br>';
   Предпочтительным является вариант 7.1.




06.04.2023 - познакомились с функциями поближе
1. Параметр функции = Аргумент функции.
2. Помимо параметров, которые в функцию нужно передавать, можно задать параметры по умолчанию.
   Пример (по умолчанию задаём $num3):
   function add($num1, $num2, $num3 = 5){...;}
3. Задача функции - (правильно отработать и) вывести результат.
4. Поэтому функция встречается дважды: при объявлении функции и при вызове функции (для работы).
   Объявление = Инициализация.
5. При вызове функции можно заменить значения параметров.
   Пример (меняем $num3):
   function add($num1, $num2, $num3 = 5){...;}
   $num1 = ... ;   $num2 = ... ;
   ...
   ... $result = add($num1, $num2, 0);
5. Помимо объявления функции нужно объявить аргументы, над которыми функция будет работать.
6. Функция - это "закрытый контейнер".
   Переменные внутри тела функции - локальные, за пределами функции - глобальные.
7. Функция видит глобальные переменные, но "снаружи" нельзя прочитать локальные переменные.
8. Есть строгая (жёсткая) типизация или type hinting, объявляется первой строкой: declare(strict_types=1);
   Что это такое я не понял. И пока не пойму, за такие проекты лучше не браться.




07.04.2023 - начали знакомиться с AJAX
1. jQuery - это набор функций (библиотека) JavaScript, фокусирующийся на взаимодействии JavaScript и HTML.
2. AJAX - это один из методов jQuery.
3. AJAX передают данные с фронта на бэк и выводит ответ бэка без перезагрузки страницы.
4. jQuery подключается в теге <head> до подключения файла с JS кодом.
5. В части передачи данных AJAX-запрос по сути представляет собой ассоциативный массив (ключ : значение).
6. Также в AJAX-запросе прописываются варианты исполнения: beforeSend, success, error, complete.
7. Пример:
	var i = 0;
	function AjaxSendForm(url, placeholder, form, append) {
	var data = $(form).serialize();
	append = (append === undefined ? false : true); // whatever, it will evaluate to true or false only
	$.ajax({
    		type: 'POST',
    		url: url,
    		data: data,
    		beforeSend: function() {
        	// setting a timeout
        	$(placeholder).addClass('loading');
        	i++;
    	},
    		success: function(data) {
        		if (append) {
            		$(placeholder).append(data);
        		} else {
            		$(placeholder).html(data);
        		}
    		},
  		error: function(xhr) { // if error occured
       			alert("Error occured.please try again");
        		$(placeholder).append(xhr.statusText + xhr.responseText);
       	 		$(placeholder).removeClass('loading');
    		},
    		complete: function() {
        		i--;
       			if (i <= 0) {
        		$(placeholder).removeClass('loading');
        		}
    		},
    		dataType: 'html'
		});
	}
   (https://stackoverflow.com/questions/21648356/jquery-ajax-beforesend-and-success-error-complete)




08.04.2023 - продолжили знакомиться с AJAX
1. значение "json" в параметре "dataType" AJAX-запроса значит что фронт будет ждать ответ от сервера 
   в формате "json".
2. Формат "json" конвертирует данные в строку. 
3. Есть какая-то проблема у json и var_dump.     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
4. Параметр "data" показывает какие данные передаются на сервер.
5. К параметрам "data" можно обратиться по ключу.
   Пример:
   $.ajax({
	url: '/php_Aleksey/main/php/calculator_function_AJAX/controller/calculator.php',
	method: 'post',
	dataType: 'json',
	data: {text: 'Текст'},
		success: function(data){
			console.log(data.text);
		},
    	...
   });
   В консоль выведет просто "Текст"




10.04.2023 - зарегались на Weblancer, оформили профили в Telegram и GitHub